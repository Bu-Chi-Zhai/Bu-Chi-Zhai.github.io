{

	"projects": [{
			"id": "elasticdb",
			"title": "Elastic DB",
			"time": "Dec 2016 - Feb 2017",
			"category": "Database",
			"bullets": [
				"Used TPC-W benchmark to simulate primarily shopping (WIPS), browsing (WIPSb) and web-based ordering (WIPSo).",
				"Developed an elastic distributed database using MySQL replication and used it to serve as the backend for a multi-tier web application running TPC-W benchmark.",
				"Developed a load balancer to route the browsing queries to master and route the ordering queries to slaves in a round-robin manner",
				"Use backup slaves to guarantee the high availability (HA) of the database in the real-time.",
				"Auto scale out/in the database server based on service level agreement when real-time workload changes.",
				"Monitor the workload/database/operating system, display statistic graph of metrics (workload/queries/resources) using CanvasJS."
			],
			"skills": [
				"High availability and dynamic scalability of a distributed database",
				"Multi-tier web application",
				"TPC-W benchmark",
				"MySQL(replication)",
				"EasyRules",
				"JavaScript",
				"Dstats",
				"CanvasJS",
				"Git",
				"Eclipse",
				"AWS"
			],
			"images": ["img/elasticdb1.png", "img/elasticdb2.png", "img/elasticdb3.png"],
			"progress": "",
			"details": [

			{
				"type": "p",
				"content": "<span class='badge badge-pill'>Node setup</span> Set master and slaves in set_env.sh. Enter your IP address at the following places. If you have multiple IP addresses for slaves and candidates, use space to seperate them."
			},
			{
				"type": "code",
				"content": "MASTER = your_master_IP  SLAVE = (your_slave_IP_1 your_slave_IP_2)  CANDIDATE = (your_candidate_IP)"
			},
			{
				"type": "p",
				"content": "Make sure you have installed mysql on all the nodes in the queues. And Make sure those node in queues have root access to each other without password."
			},

			{
            	"type": "p",
            	"content": "<span class='badge badge-pill'>Eclipse</span> Import code to your eclipse. Run following commands in your Terminal:"
            },
			{
				"type": "pre",
				"content": "mvn eclipse:eclipse<br/>mvn dependency:resolve<br/>"
			},

			{
				"type": "p",
				"content": "<span class='badge badge-pill'>Property</span> Modify the scripts/set_env.sh to set the MASTER, SLAVE and CANDIDATE; Modify the tpcw.properties to set the read queue, write queue and candidate queues; Modify the tpcw.properties to set the server that we would like to destroy (to test availability)"
			},

			{
            	"type": "p",
            	"content": "<span class='badge badge-pill'>Setup</span> Use ./testConnection to test the access of each other; Use ./prepareMasterSlaves to get ready for master, slaves and candidates."
            },
			{
				"type": "pre",
				"content": "./testConnection.sh <br/>./prepareMasterSlaves.sh<br/>"
			},
			{
                "type": "p",
                "content": "<span class='badge badge-pill'>Run</span> From eclipse, you can run the program without any parameter. If you want to test scalability, runt it with -c. If you want to test availability and scalability, run it with -c -d."
            },
            {
            	"type": "p",
            	"content": "<span class='badge badge-pill'>Monitor</span> run ./enableMonitorys.sh, this will run dstats and open windows for MASTER, SLAVE and CANDIDATE"
            },
            {
            	"type": "code",
            	"content": "./enableMonitor.sh"
            },
            {
            	"type": "p",
            	"content": "Open your browser to point to monitor IP: 8080/WebContent/elasticdb.jsp"
            }

			]

		}, {
			"id": "onlinestore",
			"title": "Online Music Store",
			"time": "Dec 2016 - Jan 2017",
			"category": "Fullstack",
			"bullets": [
				"Developed UI by using AngularJS and Bootstrap.",
				"Implemented backend functions by using Spring MVC and REST Services",
				"Designed and Implemented role based user authentication and account management. ",
				"Created product module to support CRUD operations, including product searching and sorting, etc.",
				"Implemented shopping cart and order check out functionality."
			],
			"skills": [
				"Spring MVC",
				"Spring Data",
				"Spring Security",
				"Spring REST",
				"Spring Web Flow",
				"Hibernate",
				"AngularJS",
				"JSP",
				"Bootstrap",
				"MySQL"
			],
			"images": ["img/onlinestore1.PNG", "img/onlinestore2.PNG", "img/onlinestore3.PNG"],
			"progress": "",
			"details": [{
				"type": "p",
				"content": "this is a test text for online music store"
			}, {
				"type": "code",
				"content": "public class Solution"
			}, {
				"type": "p",
				"content": "text text text"
			}]
		}, {
			"id": "miniflickr",
			"title": "Mini Flickr",
			"time": "Nov 2016 - Nov 2016",
			"category": "Frontend",
			"bullets": [
				"Developed UI by using AngularJS and Bootstrap.",
				"Implemented backend functions by using NodeJS",
				"Used layzyload to display the gallary. ",
				"Created pin and customized filter/searching functions."
			],
			"skills": [
				"AngularJS",
				"NodeJS",
				"Bootstrap",
				"Lazyload",
				"Flickr API"

			],
			"images": [],
			"progress": "",
			"details": [{
				"type": "p",
				"content": "this is a test text for miniflickr"
			}, {
				"type": "code",
				"content": "public class Solution"
			}, {
				"type": "p",
				"content": "text text text"
			}]
		}

	]
}